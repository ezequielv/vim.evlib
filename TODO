" general:

	" DONE: have a way for modules to refuse to work ('finish' immediately)
	"  if we don't have a fully initialised library *or* if we are not
	"  initialising (this last code path will be validated by developers, so
	"  there is no risk of using uninitialised modules from any other module)

	" TODO: investigate if we can (or even if it makes sense to) make the
	"  'compatible' setting (this one has a "cascading" effect on other
	"  options) preserved around module loading ("sourcing"), so if the user
	"  decides to use 'set compatible', then ideally we'd like to preserve
	"  that when he's either:
	"   * sourcing files belonging to this library;
	"   * calling functions from this library;
	"   * executing commands from this library;
	"   * ... ?
	"  to determine how sensible/doable this is:
	"   * see what other plugins/libraries do;
	"   * see how difficult doing this would be
	"      (I'm thinking of having functions to do the "setup" and "restore"
	"      for "publicly-facing" sources, at least)
	"       * so we could use functions defined in the "main" 'evlib.vim' to
	"          this effect, for example;
	"   * see (ask?) if anyone would want this feature;

function evlib#Init():

	" DONE: create a directory from the root:
	"  {root}/evlib (or (see below) '{root}/lib/evlib')
	"  to which this "glob" gets added and expanded:
	"  {root}/evlib/impl/init/:
	"   * 20-test_cmd.vim
	"      this will install commands such as:
	"      (TODO: validate from vim's help (see ':h usr_41.txt', then search
	"      for '<Plug>TypecorrAdd  -> '...)
	"       g:evlib_cfg_cmd_prefix . 'TestRun'
	"        which would run:
	"       <SID>CommandTestRun ...
	"        which would then run:
	"       :call <SID>TestRun( ... )<CR>
	"
	" (NOTE: see 'versioning', below)
	" DONE: call evlib#pvt#lib#SourceEVLibFiles( 'parts/init/*.vim' )
	" + make sure that the files are "sourced" in alphabetical order
	" + so that we can create '01-run_pre_init.vim' and '98-run_post_init.vim'
	"    which will attempt to do
	"     + 'runtime! lib/evlib/init/pre/*.vim'
	"     + 'runtime! lib/evlib/init/post/*.vim'
	"     if the variable 'g:evlib_cfg_init_userscripts_enable'
	"      (default: non-zero) is set to a non-zero value
	"    * make the base path ('lib/evlib') configurable
	"       (TODO: add cfg variable)
	"
	" LATER: only leave the following "top-level" directories:
	"  'autoload', 'plugin', 'lib/evlib'
	"  (motivation: decompressing a "zipfile"/"tar" in the ~/.vim
	"  directory)
	"  * put 'test' inside 'lib/evlib';
	"  * move the files LICENSE, README.md (rename/move them);
	"
	" LATER: make most/all of this library MS-DOS compatible
	"  ("8.3" files/dirs);
	"  * 'test' directory will be challenging (naming convention needs
	"     long names -- using directories might not be as "friendly");

" library versioning:

	"
	"  IDEA: evlib#GetAPIVersion() -> string ('1.0')
	"  DONE: evlib#SupportsAPIVersion( ver_major, ver_minor, ver_patch ) -> {bool}
	"   example: evlib#SupportsAPIVersion( 1, 0, 3 )
	"   example: evlib#SupportsAPIVersion( 2, 1, 0 )
	"
	"  NOTE: API major versions are backwards compatible with all minor
	"   versions up to and including that major version.
	"
	"   NOTE: try hard to stay on version '1.x', for backwards compatibility
	"
	"  NOTE: patch versions only include bug fixes (this allows for low-risk
	"   branches, tags and releases)
	"
	"  NOTE: every time we add a new function or extend the functionality (the
	"   API changes), we should increment the minor version number
	"   (currently in 'lib/evlib/c_main.vim')
	"
	"   TODO: or make a function available to library users that is quick and
	"    safe to call (something like 'exists('*{function}')' but that works
	"    with 'autoload'-ed modules (exists() does not, AFAICT));
	"
	"    see: http://vim.1045645.n5.nabble.com/quot-exists-mylib-func-quot-will-return-0-in-some-cases-even-if-it-s-installed-td1211599.html
	"
	"    IDEA: as hinted by ':h autoload' reading an undefined variable using
	"     the '#' separator will trigger an autoload, which means that we can
	"     make the algorithm like this:
	"      * try exists( '*{function}' );
	"      * decompose the function to replace the last bit with something
	"         known not to exist:
	"          :try
	"           :execute 'silent let l:tmp = ' . {function} . '_someImpossibleVarName'
	"          :catch " eat exceptions
	"          :endtry
	"         this way the 'autoload' will trigger, and we can try the
	"         'exists()' again;
	"
	"      TODO: make this into a reusable function (as we are not using any
	"       internal library knowledge);
	"
	"      NOTE: guard this code against repeatedly reloading (or, in our
	"       case, re-attempting to 'autoload') the module supposedly
	"       containing the queried function -- *if* there is a performance
	"       penalty (we could save a (hashed) list of prefixes that have been
	"       validated (truncate everything past the last '#' to create that
	"       key));
	"
	"    NOTE: careful with making the function load the modules if they're
	"     note meant to be loaded (but is the "include guard" good enough
	"     already so that this wouldn't be an issue?);
	"
	"    NOTE: maybe even filter out the input to this function, so that
	"     '*#pvt#*' functions are always reported as not supported;
	"
	"    NOTE: this way, I only have to "update" the official API number once
	"     I'm happy with the development changes (whilst still providing a way
	"     for developers to check whether their copy(/fork) of this library
	"     supports a particular feature they want);
	"
	"     example:
	"      :if evlib#SupportsAPIVersion( 1, 0, 0 )
	"      		\ && evlib#SupportsFunctionality( [
	"      		\      '*evlib#rtpath#ExtendVersionedRuntimePath', " vim-compatible
	"      		\      'feature:a_feature_name', " own format
	"      		\      'libversion:1,0,0', " own format
	"      		\     ] )
	"      		" we have got what we wanted
	"      :endif
	"
	"      NOTE: we could use a dictionary, too (but then the checking order
	"       could not be guaranteed)
	"
	"       NOTE: but I could tell the user that the order is well defined:
	"        * 'libversion:';
	"        * 'feature:';
	"        * '*' ('func'/'functions' for the dictionary); (functions)
	"
	"   NOTE: and document in a new file "changes.txt" (or similar) each
	"    change.
	"
	"   NOTE: when developing a new version, increase the version number
	"    straight away, and state that it's a development version (another
	"    function? -- maybe not), so that users getting the "latest and
	"    greatest" (but not officially released or tagged) code can still
	"    check for its existence (at risk, of course, as the development
	"    version is likely to change before the official tagging/release).
	"

tests:

	" TODO: add tests for the cases where the user scripts for "library
	"  initialisation" ('{runtimedir}/lib/evlib/init/{pre,post}/*.vim') throw
	"  or produce errors that make vim throw an exception.
	"
	"  TODO: refactor 'test/vimrc_61_init_libstate_01-ex-local-pass.vim' so
	"   that some of that functionality can be reused from this new test:
	"   either make the existing call to
	"   EVLibTest_GroupSet_LoadLibrary_Method_RuntimePathAdjust() into another
	"   function (parameters to add "hooks"), or make lists for the different
	"   stages available (trickier, as that the invoked function currently
	"   takes a dictionary, rather than a list);
	"
	"  DONE: refactor the scripts in 'test_trees/init.01/lib/evlib/init/...'
	"   so that a global variable can be used to make these scripts throw.
	"   the default would be not to throw, and would give the same
	"   functionality we've got at the moment (just the counter
	"   check-and-set).
	"
	"   DONE: create a function to be called from these two scripts, as in:
	"    EVLibTest_Local_UserScriptConditionallyThrow( which_user_script )
	"    * where {which_user_script} is one from [ 'pre', 'post' ], and the
	"       function uses the global/script-local variable value to see when
	"       to throw. the value could be one of: [ '', 'pre', 'post', 'all' ];
	"
	" TODO: refactor test/common.vim into two:
	"  * existing file (test/common.vim);
	"  * new file to be used from test/common.vim and test/runutil.vim
	"     (test/common/tout.vim, or test/commtout.vim):
	"     * MAYBE: protocol:
	"      * set a variable (say, g:evlib_test_common_testout_cmd) to
	"        'load';
	"       * implementation detail: we would save the value of existing
	"          variables, and avoid defining functions, and save our changes
	"          into a dictionary, for example;
	"      * use one/many of the few global functions (say,
	"         EVLibTest_TestOutput_OutputLine())
	"      * set command variable to 'unload';
	"       * implementation detail: we would restore the previous state from
	"          the dictionary;
	"   * this new file is about:
	"    * MAYBE: being "transparent": by saving what changes to the
	"       "includer"'s environment are made, and restoring them later, we
	"       can make sure that we are (for the most part) "transparent" or
	"       "neutral";
	"    * keeping code in a single place: for now, the way to write messages
	"       when redirecting to a file, and even the initialisation of the
	"       redirection, will be kept in a single place -- even better in
	"       terms of keeping "in sync" with a particular format;

run tests from vim:

	" TODO: implement new architecture for running tests.
	"  * there is a 'runtest.vim' (it already exists) that is responsible
	"     for running tests (implement ':EVTestRunFiles',
	"     'EVLibTest_RunUtil_Command_RunTests()');
	"
	"  * the tests to be run *can* have a vim script associated to them
	"     (directory-based (subdir of the tests, or a file in the same dir
	"     with a formatted name, etc.)) which would be called for processing
	"     the results that the scripts in that directory would produce.
	"
	"   * so, for example, if there is a test 'vimrc_01_mytest.vim', there
	"      could be a file 'evtest/procout-1-0-0.vim' which could define
	"      whatever needs to be defined for processing this test's output;
	"
	"   * these 'procout-{version}.vim' files are versioned:
	"
	"    * matching major versions should process output from all previous
	"       minor versions ('1-0-3' processes output produced by '1-0-0' to
	"       '1-0-3' inclusive);
	"
	"    * these files define functions and variables for the *active buffer*,
	"       which is the test output;
	"
	"     * they are allowed global interactions with other versions of this
	"        script, but the interface should be as narrow as possible:
	"
	"      * for the moment, I can only think of the global:
	"
	"       * g:evlib_test_runtest_id
	"
	"     * obvious candidates for this are the 'foldexpr' function and the
	"        'foldtext' one;
	"
	"     * should we run (':source') these files in a sandbox or have some
	"        way of containing what they can do to the currently running vim
	"        instance?
	"
	"  * when the user specifies test files to be "run", these files could be
	"     located in different "tree" directories (belonging to different vim
	"     plugins/"packages"), for example, each with a different "testing
	"     framework" (evlib) snapshot, and it's possible that they're not all
	"     compatible (different "major" test output format versions).
	"
	"   * IDEA: to solve this, we can't expect the output of each group of
	"      tests to be given in a consistent format, and so we can either:
	"
	"    1. reject the running of the tests, possible reporting to the user
	"        which groups were recognised, and which formats they claim to
	"        produce the output in;
	"
	"    2. run the tests in groups, so that the command behaves as if the
	"        user had done the splitting him/herself (more than one internal
	"        invocation);
	"
	"      we should probably go for option #2, as it's the least disruptive,
	"      and probably what the user would want us to do in the first place.
	"
	"  * if none of the test files have a 'procout-{version}.vim' file, the
	"     framework should provide its own implementation (which, of course,
	"     will be the "latest and greatest" for each of the major versions),
	"     plus a means for detecting the format;
	"
	"  * the framework should also have support for wrapping the running of
	"     each test file, so that ':source' errors can be caught from within
	"     vim and reported from within vim appropriately;
	"
	"   * conceptually, having a vim script at several points in the test
	"      loading process is probably the "cleanest" mechanism:
	"
	"       runutil.vim ->
	"        vim -c 'source {runnerdir}/runner_loader.vim' ->
	"         '{testdir}/test_loader.vim' (optional) ->
	"          '{testdir}/{test_file.vim}'
	"
	"      this way, we can have our "runner"-local output producing and
	"      error-catching script, then have "test directory"-local equivalents
	"      (the latter will be tied to the test file testing framework
	"      implementation, which could be newer or older than the one running
	"      the tests);
	"
	"    * be careful with the following:
	"
	"     * output format: just because we have 'runner_loader.vim' in the
	"        script chain, it does not mean that this script should produce
	"        output in a way that could collide with the output produced by
	"        the individual test(s), for which it should not attempt to
	"        "guess" the format (as it could be newer than the newest version
	"        supported by the framework to which 'runner_loader.vim' belongs);
	"
	"      * we can possibly detect error messages produced by
	"         'runner_loader.vim' in a future-proof way (so that this format
	"         should not be changed from version '1-0-0', or at least define
	"         the format so that future extensions can be correctly parsed by
	"         *all* 'procout-{version}.vim' released scripts);
	"
	"     * redirection: we could leave redirection to 'runner_loader.vim', at
	"        least conceptually -- so all the '{test_file}.vim' (and the
	"        scripts they ':source', like 'test/common.vim') should attempt to
	"        detect active redirections -- and leave them undisturbed if they
	"        have already been set up;
	"
	" * test preambles:
	"  * we can leave up to each "definition file" to define a function for
	"     writing the preamble information;
	"    IDEA: have each script define a function as "script-local", then
	"     expose the function through a Funcref in a global variable (which we
	"     will copy to a script/local variable and then 'unlet', to allow
	"     other modules to do the same thing)
	"

