" general:

	" FIXME: have a way for modules to refuse to work ('finish' immediately)
	"  if we don't have a fully initialised library *or* if we are not
	"  initialising (this last code path will be validated by developers, so
	"  there is no risk of using uninitialised modules from any other module)
	"
	"  IDEA: introduce new function evlib#internal#CanLoadLibraryModules() to
	"   this effect (which should return "true" if it's initialising or if
	"   it's already initialised)
	"
	"   NOTE: but make evlib/internal.vim not require this, of course! :-)
	"
	"   NOTE: or put that function directly in 'autoload/evlib.vim', and avoid
	"    that problem (it's just one function):
	"    evlib#Internal_CanLoadLibraryModules()

function evlib#Init():

	" FIXME: create a directory from the root:
	"  {root}/evlib (or (see below) '{root}/lib/evlib')
	"  to which this "glob" gets added and expanded:
	"  {root}/evlib/impl/init/:
	"   20-test_cmd.vim
	"    this will install commands such as:
	"    (TODO: validate from vim's help (see ':h usr_41.txt', then search
	"    for '<Plug>TypecorrAdd  -> '...)
	"     g:evlib_cfg_cmd_prefix . 'TestRun'
	"      which would run:
	"     <SID>CommandTestRun ...
	"      which would then run:
	"     :call <SID>TestRun( ... )<CR>
	"
	" FIXME: have autoload/evlib/internal.vim set the directory root,
	"  knowing its own relative location (fnamemodify());
	"
	" FIXME: use glob()
	"
	" (NOTE: see 'versioning', below)
	" LATER: call evlib#internal#SourceEVLibFiles( 'impl/init/*.vim' )
	" * make sure that the files are "sourced" in alphabetical order
	" * so that we can create '01-run_pre_init.vim' and '98-run_post_init.vim'
	"    which will attempt to do
	"     * 'runtime! lib/evlib/init/pre/*.vim'
	"     * 'runtime! lib/evlib/init/post/*.vim'
	"     if the variable 'g:evlib_cfg_init_userscripts_enable
	"      (default: non-zero) is set to a non-zero value
	"    * make the base path ('lib/evlib') configurable
	"       (TODO: add cfg variable)
	"
	" LATER: only leave the following "top-level" directories:
	"  'autoload', 'plugin', 'lib/evlib'
	"  (motivation: decompressing a "zipfile"/"tar" in the ~/.vim
	"  directory)
	"  * put 'test' inside 'lib/evlib';
	"  * move the files LICENSE, README.md (rename/move them);
	"
	" LATER: make most/all of this library MS-DOS compatible
	"  ("8.3" files/dirs);
	"  * 'test' directory will be challenging (naming convention needs
	"     long names -- using directories might not be as "friendly");

" library versioning:

	"
	" TODO: add certain variables so that "user scripts" can detect what
	"  version of the library is being initialised.
	"
	"  IDEA: evlib#GetAPIVersion() -> string ('1.0')
	"  IDEA: evlib#SupportsAPIVersion( ver_major, ver_minor, ver_patch ) -> {bool}
	"   example: evlib#SupportsAPIVersion( 1, 0, 3 )
	"   example: evlib#SupportsAPIVersion( 2, 1, 0 )
	"
	"  NOTE: API major versions are backwards compatible with all minor
	"   versions up to and including that major version.
	"
	"   NOTE: try hard to stay on version '1.x', for backwards compatibility
	"
	"  NOTE: patch versions only include bug fixes (this allows for low-risk
	"   branches, tags and releases)
	"
	"  NOTE: every time we add a new function or extend the functionality (the
	"   API changes), we should increment the minor version number
	"
	"   NOTE: and document in a new file "changes.txt" (or similar) each
	"    change.
	"
	"   NOTE: when developing a new version, increase the version number
	"    straight away, and state that it's a development version (another
	"    function? -- maybe not), so that users getting the "latest and
	"    greatest" (but not officially released or tagged) code can still
	"    check for its existence (at risk, of course, as the development
	"    version is likely to change before the official tagging/release).
	"

